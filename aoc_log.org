#+TITLE: Advent of Code – 2021 (Python)
#+AUTHOR: Leonardo Tamiano

* DONE Day 12: Passage Pathing
  [2021-12-12 dom 21:27]

  L'idea è quella di effettuare la visita di un grafo. Come prima cosa
  quindi in entrambe le parti del problema dobbiamo scrivere il codice
  necessario per costruire il grafo a partire dall'input.

  Dato che l'input è formattato come segue

  #+begin_example
fs-end
he-DX
fs-he
start-DX
pj-DX
end-zg
  #+end_example
  
  Il codice python utilizzato per creare il grafo è il seguente

  #+begin_src python
def create_graph(lines):
    # NOTE: the graph is bi-directional    
    graph = {}

    for line in lines:
        splitted_l = line.split("-")
        node1, node2 = splitted_l[0].strip(), splitted_l[1].strip()

        # add edge 'node1 -> node2'
        if node1 not in graph:
            graph[node1] = [node2]
        else:
            graph[node1].append(node2)

        # add edge 'node2 -> node1'
        if node2 not in graph:
            graph[node2] = [node1]
        else:
            graph[node2].append(node1)        

    return graph
  #+end_src

  A questo punto andiamo a vedere gli algoritmi utilizzati per
  visitare il grafo per le due parti del problema.

** Parte 1
   Nella prima parte dobbiamo contare il numero di cammini che partono
   dal nodo ~start~ e arrivano al nodo ~end~. I cammini sono poi vincolati
   nel seguente modo: *i nodi con etichetta minuscola possono essere utilizzati una sola volta*.

   Se vogliamo solamente contare il numero di cammini troviamo quindi
   il seguente algoritmo

   #+begin_src python
def count_paths_part_1(graph, current_node, visited_small_caves):
    # -- base cases
    if current_node == 'end':
        return 1
    if current_node not in graph:
        return 0
    else:
        result = 0
        updated_visited_small_caves = visited_small_caves.copy()
        
        # -- visit current_node
        if current_node.islower():
            updated_visited_small_caves.add(current_node)

        # -- recurse on all of its neighbours
        for possible_node in graph[current_node]:
            # -- we can only go once for each lower-node
            if possible_node.islower() and possible_node not in updated_visited_small_caves:
                result += count_paths_part_1(graph, possible_node, updated_visited_small_caves)
            elif possible_node.isupper():
                result += count_paths_part_1(graph, possible_node, updated_visited_small_caves)

        return result
   #+end_src

   Se invece vogliamo anche stampare tutti i possibili cammini l'idea
   è quella di aggiungere un ulteriore argomento alla funzione per
   ottenere la seguente

   #+begin_src python
def enhanced_count_paths_part_1(graph, current_node, visited_small_caves, visited_nodes):
    # -- base cases
    if current_node == 'end':
        return 1
    if current_node not in graph:
        return 0
    else:
        result = 0

        updated_visited_small_caves = visited_small_caves.copy()
        # -- visit current_node
        if current_node.islower():
            updated_visited_small_caves.add(current_node)
        
        updated_visited_nodes = visited_nodes.copy()
        updated_visited_nodes.append(current_node)

        # -- visit all of its neighbours
        for possible_node in graph[current_node]:
            if possible_node.islower() and possible_node not in updated_visited_small_caves:
                result += enhanced_count_paths_part_1(graph, possible_node, updated_visited_small_caves, updated_visited_nodes)
            elif possible_node.isupper():
                result += enhanced_count_paths_part_1(graph, possible_node, updated_visited_small_caves, updated_visited_nodes)

        return result
   #+end_src

   ----------------

   La funzione finale è quindi la seguente

   #+begin_src python
def part_one():
    with open("input.txt", "r") as f:
        lines = f.readlines()
        # -- build graph structure by reading input
        graph = create_graph(lines)
        # -- visit the graph and count the paths
        result = count_paths_part_1(graph, "start", set())
        print(f"Result of part one: {result}")
   #+end_src
   
** Parte 2   
   La seconda parte ci chiede di contare tutti i cammini che
   soddisfano questo vincolo: *solo un nodo con etichetta minuscola
   diverso dal nodo di partenza e da quello di arrivo è utilizzato al
   massimo volte*. Il resto dei vincoli è rimasto invariato.

   L'idea è quindi quella di scrivere una funzione che calcola il
   numero di cammini in cui un certo nodo (~small_cave~) è visitato un certo numero
   di volte (~small_cave_count~).
 
   #+begin_src python
def count_paths_part_2(graph, current_node, visited_small_caves, small_cave, small_cave_count):
    # -- base cases
    if current_node == 'end':
        return int(small_cave_count == 0)
    elif current_node not in graph:
        return 0
    else:
        result = 0
        updated_visited_small_caves = visited_small_caves.copy()
        
        # -- visit current_node
        if current_node.islower():
            updated_visited_small_caves.add(current_node)

        # -- visit all of its neighbours
        for possible_node in graph[current_node]:
            if possible_node.islower():
                if possible_node == small_cave and small_cave_count > 0:
                    result += count_paths_part_2(graph, possible_node, updated_visited_small_caves, small_cave, small_cave_count - 1)
                elif possible_node not in updated_visited_small_caves:
                    result += count_paths_part_2(graph, possible_node, updated_visited_small_caves, small_cave, small_cave_count)
            elif possible_node.isupper():
                result += count_paths_part_2(graph, possible_node, updated_visited_small_caves, small_cave, small_cave_count)
        return result
   #+end_src

   Utilizzando questa funzione possiamo risolvere la seconda parte del
   problema nel seguente modo

   #+begin_src python
def part_two():
    graph = {}
    with open("input.txt", "r") as f:
        lines = f.readlines()

        # -- build graph structure by reading input
        graph = create_graph(lines)

        # -- visit the graph and count the paths
        final_res = 0        
        small_caves = [n for n in graph if n.islower() and n != 'start' and n != 'end']
        for cave in small_caves:
            final_res += count_paths_part_2(graph, "start", set(), cave, 2)
        final_res += count_paths_part_1(graph, "start", set())
        
        print(f"Result of part two: {final_res}")
   #+end_src

   Come possiamo vedere, calcoliamo il numero di percorsi in cui
   ciascun nodo minuscolo appare esattamente due volte, e poi
   calcoliamo il numero di percorsi utilizzando i vincoli di prima.

* DONE Day 14: Extended Polymerization

** Try 1: Strings representation (failure)
   My first idea was to simply represent the entire polymer template
   as a sequence of characters and evolve the string using the
   particular rules given in the input.

   This approach is implemented as follows
   
   #+begin_src python
def better_evolve(template, rules):
    l = [f"{x}{y}" for (x, y) in zip(template, template[1:])]
    
    for i, prefix in enumerate(l):
        if prefix in rules:
            if i == len(l) - 1:
                l[i] = prefix[0] + rules[prefix] + prefix[1]
            else:
                l[i] = prefix[0] + rules[prefix]

    return "".join(l)
   #+end_src

   Where the input is read as such

   #+begin_src python
template = s_lines[0].strip()

rules = {}
for rule in s_lines[1].strip().split("\n"):
    s_rule = rule.split(" -> ")
    rules[s_rule[0]] = s_rule[1]
   #+end_src

   This approach however only works for the first part of the
   problem. For the second part the string simply becomes too big and
   it overflows the available memory.
   
** Try 2: Pairs representation (success)
   After failing the first try I tried another type of
   representation. The idea this time was to count the different
   number of pairs, and work on that representation when transforming
   from one template to another.

   To construct this representation we can use this function.

   #+begin_src python
def construct_pairs_representation(template, rules):
    unique_letters = "".join(list(set("".join(list(rules.keys())) + "".join(list(rules.values())) + "".join(list(template)))))
    
    # -- initialize pairs representation
    pairs = {}
    for x in itertools.permutations(unique_letters, 2):
        pairs["".join(x)] = 0
    for x in unique_letters:
        pairs[f"{x}{x}"] = 0

    for (x, y) in list(zip(template, template[1:])):
        pairs[f"{x}{y}"] += 1

    return pairs
   #+end_src

   We can then perform the template synthesis with this one

   #+begin_src python
def even_better_evolve(pairs, rules):
    new_pairs = {x:0 for x in pairs.keys()}
    
    # -- evolve pair representation
    for r in rules:
        if pairs[r] > 0:
            # -- we have a match
            # print(f"Found matching rule: {r} -> {rules[r]}")
            new_pairs[f"{r[0]}{rules[r]}"] += pairs[r]
            new_pairs[f"{rules[r]}{r[1]}"] += pairs[r]

    return new_pairs
   #+end_src

   And we can evaluate our answer with the following function. Note
   that in this function we count only the first letter for each
   pair. This is done to make sure that we don't doubly count the
   letters. Then we just have to add one to the final letter of the
   original template.

   #+begin_src python
def compute_result(template, pairs):
    unique_letters = set("".join(list(pairs.keys())))
    count = {l: 0 for l in unique_letters}
    
    for l in unique_letters:
        for p in pairs:
            if l == f"{p[0]}":
                count[l] += pairs[p]

    # The last letter never changes.
    count[template[-1]] += 1

    sorted_keys = list(count.keys())
    sorted_keys.sort(key=lambda x: count[x], reverse=True)
    
    return count[sorted_keys[0]] - count[sorted_keys[-1]]
   #+end_src

   Then the actual code for the challenge is shown below

   #+begin_src python
def part_two():
    with open("input.txt", "r") as f:
        s_lines = f.read().split("\n\n")

        # -- read input
        template = s_lines[0].strip()
        
        rules = {}
        for rule in s_lines[1].strip().split("\n"):
            s_rule = rule.split(" -> ")
            rules[s_rule[0]] = s_rule[1]

        pairs = construct_pairs_representation(template, rules)
        for i in range(0, 40):
            pairs = even_better_evolve(pairs, rules)

        result = compute_result(template, pairs)
        print(f"Solution to part one: {result}")
   #+end_src

* DONE Day 15: Chiton
  
** Part 1 - Problem
   The cavern is large, but has a very low ceiling, restricting your
   motion to two dimensions. *The shape of the cavern resembles a
   square*; a quick scan of chiton density produces a map of risk level
   throughout the cave (your puzzle input). For example:

   #+begin_example
1163751742
1381373672
2136511328
3694931569
7463417111
1319128137
1359912421
3125421639
1293138521
2311944581
   #+end_example

   You start in the top left position, your destination is the bottom
   right position, and you cannot move diagonally.

   The number at each position is its risk level; to determine the
   total risk of an entire path, add up the risk levels of each
   position you enter (that is, don't count the risk level of your
   starting position unless you enter it; leaving it adds no risk to
   your total).

   Your goal is *to find a path with the lowest total risk*.

   What is the lowest total risk of any path from the top left to the
   bottom right?

** Part 1 - Solution
   The idea is to implement ~dijkstra~ algorithm using a ~heap queue~
   offered by python.

   To do this we first implement a function that returns the adjacent
   cell of a given position.

   #+begin_src python
def get_adjacent(max_rows, max_cols, x, y):
    possible_pos = [(x, y - 1), (x, y + 1), (x - 1, y), (x + 1, y)]
    return [(x, y) for (x, y) in possible_pos if x >=0 and x < max_rows and y >= 0 and y < max_cols]
   #+end_src

   And then we implement the actual dijkstra algorithm for finding the
   shortest paths in a weighted graph

   #+begin_src python
def dijkstra(positions, grid, s):
    distance = {}
    found_pos_opt = {}
    heap = []

    n_rows = len(grid)
    n_cols = len(grid[0])

    for p in positions:
        distance[p] = math.inf if p != s else 0
        found_pos_opt[p] = False

    s_x, s_y = s
    heapq.heappush(heap, (distance[s], s))

    while heap:
        _, u = heapq.heappop(heap)

        if found_pos_opt[u]:
            continue

        # used to not having to implement decrease-key operation
        found_pos_opt[u] = True

        u_x, u_y = u
        for v in get_adjacent(n_rows, n_cols, u_x, u_y):
            v_x, v_y = v

            if distance[v] == math.inf:
                distance[v] = distance[u] + grid[v_x][v_y]
                heapq.heappush(heap, (distance[v], v))
                
            elif distance[u] + grid[v_x][v_y] < distance[v]:
                distance[v] = distance[u] + grid[v_x][v_y]
                heapq.heappush(heap, (distance[v], v))
                        
    return distance
   #+end_src

   After this the solution to part one can be easily implemented.

   #+begin_src python
def part_one():
    with open("input.txt", "r") as f:
        grid = []

        for line in f.readlines():
            rows = [int(n) for n in list(line) if n != '\n']
            grid.append(rows)

        n_rows = len(grid)
        n_cols = len(grid[0])

        s = (0, 0)
        positions = []
        for x in range(0, n_rows):
            for y in range(0, n_cols):
                positions.append((x, y))
        
        distances = dijkstra(positions, grid, (0, 0))
        result = distances[(n_rows - 1, n_cols - 1)]
        
        print(f"Solution to part one: {result}")
   #+end_src
   

** Part 2 - Problem
   The entire cave is actually five times larger in both dimensions
   than you thought; the area you originally scanned is just one tile
   in a 5x5 tile area that forms the full map.

   Your original map tile repeats to the right and downward; each time
   the tile repeats to the right or downward, all of its risk levels
   are 1 higher than the tile immediately up or left of it. However,
   risk levels above 9 wrap back around to 1.
   
** Part 2 - Solution
   The idea essentially is to construct this larger graph, and then
   apply the same algorithm.

   To construct the graph the following two functions can be used.

   #+begin_src python
def grow_horizontally(grid, level):
    new_grid = []
    
    for old_row in grid:
        new_row = []
        for i in range(1, level + 1):
            new_row += [x + i if x + i <= 9 else ((x + i) % 9) for x in old_row]
        new_grid.append(old_row + new_row)

    return new_grid
   #+end_src

   #+begin_src python
def grow_vertically(grid, level):
    new_grid = grid.copy()

    for i in range(1, level + 1):
        for old_row in grid:
            new_row = [x + i if x + i <= 9 else ((x + i) % 9) for x in old_row]
            new_grid.append(new_row)

    return new_grid
   #+end_src

   Then, by calling them as such, we're able to construct the map
   satisfying the requirements for then applying Dijkstra and solving
   the challenge.

   #+begin_src python
# first, grow horizontally
grid = grow_horizontally(grid, 4)
# then, vertically
grid = grow_vertically(grid, 4)
   #+end_src
